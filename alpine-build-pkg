#!/usr/bin/env bash

declare help="
Script for building alpine pkgs using resnullius/alpine-devel docker's images.

Usage:
  alpine-build-pkg run [-v <version>] [-r <path>] [-c <path>] [-k <path>]
  alpine-build-pkg gen-key [-c <path>] [-k <path>]
  alpine-build-pkg [-v 3.3] [-r <path>] [-c <path>] [-k <path>] [-s <path>] \
    [-e cmd]
  alpine-build-pkg --version
  alpine-build-pkg -h | --help

Options:
  -v                          Alpine tag to use, defaults to 3.3.
  -r                          Path to repo, final destination of the package
                              being built and used as extra repo during the
                              build process.
  -c                          Path to the abuild.conf file, defaults to
                              ~/.alpine/conf.
  -k                          Path to the developer keys, defaults to
                              ~/.alpine/keys.
  -s                          Path to the source, defaults to current
                              directory.
  -e                          Change the entrypoint to that value.
  -h --help                   Show this screen.
  --version                   Show versions.
"
declare version="
Version: 2.1.1.
Licensed under the MIT terms.
"

declare ARCH
ARCH=$(uname -m)

declare keys_dir=${KEYS_DIR:-~/.alpine/keys}
declare conf_dir=${CONF_DIR:-~/.alpine/conf}
declare repo_dir=${REPO_DIR:-$PWD/pkgs}
declare src_dir=${SRC_DIR:-$PWD}
declare image_name=${IMAGE_NAME:-resnullius/alpine-devel}
[ -d "$repo_dir" ] && repo_dir=$(cd "$repo_dir" && pwd)
[ -d "$src_dir" ] && src_dir=$(cd "$src_dir" && pwd)

declare image_ver="3.3"
declare entrypoint

evaluate_build_options() {
  while test -n "$1"; do
    case "$1" in
      -v)
        image_ver="$2"; shift; shift;;
      -r)
        if [[ ! -d "$2" ]]; then
          mkdir -p "$2"
        fi
        repo_dir=$(cd "$2" && pwd)
        shift; shift;;
      -c)
        [[ -d "$2" ]] && conf_dir=$(cd "$2" && pwd);
        shift; shift;;
      -k)
        [[ -d "$2" ]] && keys_dir=$(cd "$2" && pwd);
        shift; shift;;
      -s)
        [[ -d "$2" ]] && src_dir=$(cd "$2" && pwd);
        shift; shift;;
      -e)
        entrypoint="--entrypoint $2"
        if [[ "$2" == "/bin/sh" ]]; then
          entrypoint+=" -ti"
        fi
        shift; shift;;
      *) shift;;
    esac
  done
  echo "Will build using:"
  echo "Alpine version: $image_ver"
  echo "Repo dir: $repo_dir"
  echo "Config dir: $conf_dir"
  echo "Keys dir: $keys_dir"
  echo "Source dir: $src_dir"
  if [[ -n "$entrypoint" ]]; then
    echo "Entrypoint changed to $entrypoint"
  fi
}

basic_check() {
  echo "Basic checks"
  [[ ! -e "$src_dir"/APKBUILD ]] && \
    [[ "$entrypoint" != "--entrypoint genkey.sh" ]] && \
    echo "No APKBUILD on $src_dir" && exit 1
  echo "Everything in place"
}

determine_image_name() {
  if [[ "$ARCH" != "x86_64" ]]; then
    image_name+="-$ARCH"
  fi
}

# shellcheck disable=SC2086
run_docker() {
  docker run \
    $entrypoint \
    --rm \
    -v "$src_dir":/opt/src \
    -v "$repo_dir":/opt/repo \
    -v "$conf_dir":/opt/conf \
    -v "$keys_dir":/opt/keys \
    $image_name:"$image_ver"
}

build() {
  evaluate_build_options "$@"
  basic_check
  determine_image_name
  run_docker
}

print_version() {
  echo "$version"
}

print_help() {
  echo "$help"
}

main() {
  set -eo pipefail; [[ "$TRACE" ]] && set -x
  declare cmd="$1"
  case "$cmd" in
    -h|--help)            shift; print_help "$@";;
    --version)            shift; print_version "$@";;
    run)                  shift;
      set - "$@" "-e" "/bin/sh"
      build "$@";;
    gen-key)              shift;
      set - "$@" "-e" "genkey.sh"
      build "$@";;
    *)                    build "$@";;
  esac
}

main "$@"
