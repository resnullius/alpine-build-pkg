#!/usr/bin/env bash

declare help="
Script for building alpine pkgs using resnullius/alpine-devel docker's images.

Usage:
  alpine-build-pkg run [-v <version>] [-r <path>] [-c <path>] [-k <path>]
    [-K <path>] [-x https://other.repo/path] [-x https://yet.another/repo]
  alpine-build-pkg gen-key [-c <path>] [-k <path>]
  alpine-build-pkg [-v 3.3] [-r <path>] [-c <path>] [-k <path>] [-s <path>]
    [-e cmd] [-K <path>] [-x https://other.repo/path]
    [-x https://yet.another/repo]
  alpine-build-pkg --version
  alpine-build-pkg -h | --help

Options:
  -v              Alpine tag to use, defaults to edge. Can use 3.3, 3.4, 3.5
                  too.
  -r              Path to repo, final destination of the package being built
                  and used as extra repo during the build process.
  -c              Path to the abuild.conf file, defaults to ~/.alpine/conf.
  -k              Path to the developer keys, defaults to ~/.alpine/keys.
  -K              Path to extra keys to be added, just public ones.
  -s              Path to the APKBUILD, defaults to current directory.
  -e              Change the entrypoint to that value.
  -x              Add extra repos. Supports multiple repos.
  -h --help       Show this screen.
  --version       Show versions.
"
declare version="
Version: 2.2.0.
Licensed under the MIT terms.
"

declare ARCH
ARCH="$(uname -m)"

declare keys_dir="${KEYS_DIR:-$HOME/.alpine/keys}"
declare conf_dir="${CONF_DIR:-$HOME/.alpine/conf}"
declare repo_dir="${REPO_DIR:-$PWD/pkgs}"
declare src_dir="${SRC_DIR:-$PWD}"
declare extra_keys_dir
declare -a extra_repos
declare image_name="${IMAGE_NAME:-resnullius/alpine-devel}"
[ -d "$repo_dir" ] && repo_dir=$(cd "$repo_dir" && pwd)
[ -d "$src_dir" ] && src_dir=$(cd "$src_dir" && pwd)

declare image_ver="edge"
declare entrypoint

evaluate_build_options() {
  while getopts ":v:r:c:k:K:s:e:x:" opt "$@"; do
    case "$opt" in
      v)
        image_ver="$OPTARG";;
      r)
        if [ ! -d "$OPTARG" ]; then mkdir -p "$OPTARG"; fi
        repo_dir=$(cd "$OPTARG" && pwd);;
      c)
        [ ! -d "$OPTARG" ] && echo "No config dir found" && exit 1
        conf_dir=$(cd "$OPTARG" && pwd);;
      k)
        [ ! -d "$OPTARG" ] && echo "No keys dir found" && exit 1
        keys_dir=$(cd "$OPTARG" && pwd);;
      K)
        [ ! -d "$OPTARG" ] && echo "No extra keys dir found" && exit 1
        extra_keys_dir=$(cd "$OPTARG" && pwd);;
      s)
        [ ! -d "$OPTARG" ] && echo "No source dir found" && exit 1
        src_dir=$(cd "$OPTARG" && pwd);;
      x)
        extra_repos+=("$OPTARG");;
      e)
        entrypoint="--entrypoint $OPTARG"
        if [ "$OPTARG" == "/bin/sh" ]; then
          entrypoint+=" -ti"
        fi
        shift; shift;;
      \?) echo "Invalid option -$OPTARG ignored" >&2 ;;
      :)
        echo "Option -$OPTARG requires an argument" >&2 && exit 1;;
    esac
  done
  echo "Will build using:"
  echo "Alpine version: $image_ver"
  echo "Repo dir: $repo_dir"
  echo "Config dir: $conf_dir"
  echo "Keys dir: $keys_dir"
  [[ ! -z "$extra_keys_dir" ]] && echo "Extra keys dir: $extra_keys_dir"
  echo "Source dir: $src_dir"
  if [ -n "$entrypoint" ]; then
    echo "Entrypoint changed to $entrypoint"
  fi
}

basic_check() {
  echo "Doing some basic checks"
  [ ! -e "$src_dir"/APKBUILD ] && \
    [ "$entrypoint" != "--entrypoint genkey.sh" ] && \
    echo "No APKBUILD on $src_dir" && exit 1
  echo "Everything in place"
}

determine_image_name() {
  if [ "$ARCH" != "x86_64" ]; then
    image_name+="-$ARCH"
  fi
}

# shellcheck disable=SC2086
run_docker() {
  local -a command
  if [ -z "$entrypoint" ]; then
    command=("build")
    if [ ! "${#extra_repos[@]}" -eq 0 ]; then
      for repo in "${extra_repos[@]}"; do
        command+=("-x" "$repo")
      done
    fi
  fi

  local -a docker_args

  docker_args=("-v" "$src_dir:/opt/src")
  docker_args+=("-v" "$repo_dir:/opt/repo")
  docker_args+=("-v" "$conf_dir:/opt/conf")
  docker_args+=("-v" "$keys_dir:/opt/keys")

  if [ ! -z "$extra_keys_dir" ]; then
    docker_args+=("-v" "$extra_keys_dir")
  fi

  if [ "$DEBUG" ]; then
  echo docker pull "$image_name:$image_ver"
  echo docker run
  echo   $entrypoint
  echo   --rm
  echo   "${docker_args[@]}"
  echo   "$image_name":"$image_ver" "${command[@]}"
  return 0
  fi

  docker pull "$image_name:$image_ver"
  docker run \
    $entrypoint \
    --rm \
    "${docker_args[@]}" \
    "$image_name":"$image_ver" "${command[@]}"
}

build() {
  evaluate_build_options "$@"
  basic_check
  determine_image_name
  run_docker
}

print_version() {
  echo "$version"
}

print_help() {
  echo "$help"
}

main() {
  set -eo pipefail; [ "$TRACE" ] && set -x
  declare cmd="$1"
  case "$cmd" in
    -h|--help)            shift; print_help "$@";;
    --version)            shift; print_version "$@";;
    run)                  shift;
      set - "$@" "-e" "/bin/sh"
      build "$@";;
    gen-key)              shift;
      set - "$@" "-e" "genkey.sh"
      build "$@";;
    *)                    build "$@";;
  esac
}

main "$@"
